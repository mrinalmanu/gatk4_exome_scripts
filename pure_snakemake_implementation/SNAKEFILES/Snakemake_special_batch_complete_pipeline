# Smkgatk4 pipeline

configfile: "/gatk/smkgatk4/sample_configs/special_batch.json"

SAMPLES = config['samples']

ref = config['ref']
dbsnp = config['dbsnp']
intervals = config['intervals']
mills = config['mills']
lib = config['libraries']
rgp = config['read_group']

rule all:
    input:
        "/gatk/output_folder/vc_proj/all_outputs/joint_vcf/special_batch.joined.vcf"

####################################### Additions ##############################

rule bam_to_fastq:
    input:
        "/gatk/output_folder/vc_proj/all_samples/special_batch/{sample}.dedup.bam"
    output:
        o1="/gatk/output_folder/vc_proj/all_samples/special_batch/fastqs/{sample}.R1.fastq.gz",
        o2="/gatk/output_folder/vc_proj/all_samples/special_batch/fastqs/{sample}.R2.fastq.gz"
    shell:
        "gatk --java-options \"-Xmx4G\" SamToFastq -I {input} -F {output.o1} -F2 {output.o2}"

# bwa

rule bwa_align:
    input:
        i1="/gatk/output_folder/vc_proj/all_samples/special_batch/fastqs/{sample}.R1.fastq.gz",
        i2="/gatk/output_folder/vc_proj/all_samples/special_batch/fastqs/{sample}.R2.fastq.gz"
    output:
        "/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.bam"
    shell:
        "bwa mem {ref} {input.i1} {input.i2} | samtools view -bS - > {output}"

rule samtools_sort_bam:
    input:
        "/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.bam"
    output:
        "/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.sorted.bam"
    params:
        prefix='{sample}'
    shell:
        "samtools sort -o {input} {params.prefix} > {output}"

rule samtools_index_bam:
    input:
        "/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.sorted.bam"
    shell:
        "samtools index {input}"


# gatk replace read groups rule ______________________________________________ 
#
#

rule AddReadGroup:
    input:
        "/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.sorted.bam"
    output:
        "/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.group.sorted.bam"
    params:
        RGLB='001',
        RGPL='illumina',
        RGSM='{sample}',
        RGPU='XXX'
    shell: 
        "gatk --java-options \"-Xmx4G\" AddOrReplaceReadGroups -I {input} -O {output} --RGLB {params.RGLB} --RGPL {params.RGPL} --RGSM {params.RGSM} --RGPU {params.RGPU}
' > {output}"

#
#
#___________________________________________________________________________

rule mark_duplicates:
    input: 
        "/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.group.sorted.bam"
    output:
        bams="/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.dedup.sorted.bam",
        mat="/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.dedup.metrics"
    shell:
        "gatk --java-options \"-Xmx4G\" MarkDuplicates -I {input} -O {output.bams} -M {output.mat}"


###########################################################################

rule base_recalib:
    input:
        "/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.dedup.sorted.bam"
    output:
        "/gatk/output_folder/vc_proj/all_outputs/base_recalib/{sample}.recalibrated.table"
    shell:
        "gatk --java-options \"-Xmx4G\" BaseRecalibrator -R {ref} -I {input} --known-sites {dbsnp} --known-sites {mills} -O {output}"


rule apply_recalib:
    input:
        tabs="/gatk/output_folder/vc_proj/all_outputs/base_recalib/{sample}.recalibrated.table",
        bams="/gatk/output_folder/vc_proj/all_samples/special_batch/aligned_bams/{sample}.dedup.sorted.bam"
    output:
        "/gatk/output_folder/vc_proj/all_outputs/analysis_ready/{sample}.recalibrated.bam"
    shell:
        "gatk --java-options \"-Xmx4G\" ApplyBQSR -R {ref} -bqsr {input.tabs} -I {input.bams} -O {output}"


rule haplotype_calling:
    input:
        "/gatk/output_folder/vc_proj/all_outputs/analysis_ready/{sample}.recalibrated.bam"
    output:
        "/gatk/output_folder/vc_proj/all_outputs/all_vcfs/{sample}.hc.g.vcf"
    shell:
        "gatk --java-options \"-Xmx4G\" HaplotypeCaller -R {ref} -L {intervals} -I {input} -O {output} -ERC GVCF"

# create gvcf map file, output name must be kept as gvcf.list

rule create_sample_list:
    input:
        expand("/gatk/output_folder/vc_proj/all_outputs/all_vcfs/{sample}.hc.g.vcf", sample=SAMPLES)
    output:
        "/gatk/output_folder/vc_proj/all_outputs/joint_vcf/special_batch_gvcfs.list"
    shell:
        "ls {input} > {output}"


rule combine_gvcfs:
    input:
        gvcfs_list="/gatk/output_folder/vc_proj/all_outputs/joint_vcf/special_batch_gvcfs.list"
    output:
        "/gatk/output_folder/vc_proj/all_outputs/joint_vcf/special_batch_cohort.g.vcf"
    shell:
        "gatk --java-options \"-Xmx64G\" CombineGVCFs -R {ref} -V {input.gvcfs_list} -O {output}"

# now we use the genomic workspace to do joint calling

rule genotype_gvcfs:
    input:
        c_gvcf="/gatk/output_folder/vc_proj/all_outputs/joint_vcf/special_batch_cohort.g.vcf"
    output:
        "/gatk/output_folder/vc_proj/all_outputs/joint_vcf/special_batch.joined.vcf"
    shell:
        "gatk --java-options \"-Xmx64G\" GenotypeGVCFs -R {ref} -V {input.c_gvcf} -O {output}"


